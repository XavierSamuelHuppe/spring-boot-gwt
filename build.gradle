buildscript {
    ext {
        springBootVersion = '1.5.1.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'war'
apply plugin: 'org.springframework.boot'

jar {
    baseName = 'advise'
    version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}


dependencies {
    // Compile GWT libs, needed for gwtCompile and the javaCompile
    // Also includes the servlet-api
    providedCompile 'com.google.gwt:gwt-user:2.4.0'
    providedCompile 'com.google.gwt:gwt-dev:2.4.0'

    // Needed for GWT compile and at runtime for RequestBuilder
    // Specify two artifacts as workaround for GRADLE-1934
    compile('javax.validation:validation-api:1.0.0.GA') {
        artifact {
            name = 'validation-api'
            type = 'jar'
        }
        artifact {
            name = 'validation-api'
            type = 'jar'
            classifier = 'sources'
        }
    }

    // Runtime GWT libraries, should be included in WAR
    runtime 'com.google.gwt:gwt-servlet:2.4.0'
    //runtime 'org.json:json:20090211'

    //Logging
    compile 'org.slf4j:slf4j-api:1.6.2'
    compile 'org.slf4j:jcl-over-slf4j:1.6.2'
    compile 'org.slf4j:jul-to-slf4j:1.6.2'
    compile 'ch.qos.logback:logback-classic:1.0.3'
    compile 'ch.qos.logback:logback-core:1.0.3'
    compile 'log4j:log4j:1.2.16'

    compile 'com.google.gwt:gwt-user:2.4.0'
    compile 'com.google.gwt:gwt-servlet:2.4.0'
    compile 'com.google.gwt:gwt-dev:2.4.0'

    compile 'com.google.gwt.inject:gin:1.5.0'
    compile 'com.google.inject:guice:3.0-rc2'
    compile 'com.google.inject.extensions:guice-assistedinject:3.0-rc2'

    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-web')
    testCompile('org.springframework.boot:spring-boot-starter-test')
}

task compileGwt(dependsOn: classes, type: JavaExec) {
    ext.buildDir = "${project.buildDir}/gwt"
    ext.extraDir = "${project.buildDir}/extra"

    inputs.source sourceSets.main.java.srcDirs
    inputs.dir sourceSets.main.output.resourcesDir
    outputs.dir buildDir

    // Workaround for incremental build (GRADLE-1483)
    outputs.upToDateSpec = new org.gradle.api.specs.AndSpec()

    doFirst {
        file(buildDir).mkdirs()
        //classpath.each { println it.name}
    }

    main = 'com.google.gwt.dev.Compiler'

    classpath {
        [
            sourceSets.main.java.srcDirs,           // Java source
            sourceSets.main.output.resourcesDir,    // Generated resources
            sourceSets.main.output.classesDir,      // Generated classes
            sourceSets.main.compileClasspath,       // Deps
        ]
    }

    args =
        [
            'ca.ingeno.advise.advise', // Your GWT module
            '-war', buildDir,
            '-logLevel', 'INFO',
            '-localWorkers', '2',
            '-compileReport',
            '-extra', extraDir,
            // '-draftCompile' // Speeds up compile with 25%
        ]

    maxHeapSize = '256M'
}


war.dependsOn compileGwt
war {
    from compileGwt.buildDir
}
war.doLast {
    ant.unzip(src: war.archivePath, dest: "./war")
}

task copyResources(type: Copy) {
    from 'war/advise'
    into 'src/main/resources/static/advise'
}
copyResources.dependsOn war
bootRun.dependsOn copyResources
